mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/DOS/POKE.ASM
     1 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2 				;
     3 				; Poke for SpartaDOS 3 by hjx
     4
     5 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6 				;
     7 				; Equates
     8 				;
     9
    10 				; 
    11 				; CIO
    12 				; 
    13 = E456			CIOV        = $E456
    14 				; CIOCB addresses
    15 = 0340			ICHID       = $0340
    16 = 0341			ICDNO       = $0341
    17 = 0342			ICCOM       = $0342
    18 = 0343			ICSTA       = $0343
    19 = 0344			ICBAL       = $0344
    20 = 0345			ICBAH       = $0345
    21 = 0346			ICPTL       = $0346
    22 = 0347			ICPTH       = $0347
    23 = 0348			ICBLL       = $0348
    24 = 0349			ICBLH       = $0349
    25 = 034A			ICAX1       = $034a
    26 = 034B			ICAX2       = $034b
    27
    28 				; 
    29 				; SIO
    30 				; 
    31 = E459			SIOV        = $E459
    32 				; SIOCB addresses
    33 = 0300			DDEVIC      = $0300
    34 = 0301			DUNIT       = $0301
    35 = 0302			DCOMND      = $0302
    36 = 0303			DSTATS      = $0303
    37 = 0304			DBUFLO      = $0304
    38 = 0305			DBUFHI      = $0305
    39 = 0306			DTIMLO      = $0306
    40 = 0307			DTIMHI      = $0307
    41 = 0308			DBYTLO      = $0308
    42 = 0309			DBYTHI      = $0309
    43 = 030A			DAUX1       = $030a
    44 = 030B			DAUX2       = $030b
    45
    46 				; cursor
    47 = 02F0			CRSINH        = $02F0
    48
    49 				;
    50 				; SpartaDOS 
    51 				;
    52 = 000A			DOSVEC        = $000A
    53 				;
    54 = 000A			SD_BUFOFF   = $0A ; offset in line buffer
    55 = 003F			SD_LBUF     = $3F ; offset to line buffer
    56 = 0003			SD_ZCRNAME  = $03 ; offset for jmp to crunch name
    57 = 0021			SD_COMFNAM  = $21 ; offset to buffer for crunch name 
    58 = 000A			SD_LSIO     = $0A ; negative offset to SIO vector
    59
    60 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    61 				;
    62 				; Start of code
    63 				;
    64 				            org $500
    65 				start
    66 FFFF> 0500-0669> 20 E9 +             jsr pcheck            ; check for parameter 1
    67 0503 B0 35		            bcs start_poke
    68 0505 20 37 06		error_msg   jsr PRINT
    69 0508 9B 50 4F 4B 45 20 +             .byte $9b,'POKE 1.0',$9b
    70 0512 50 61 72 61 6D 65 +             .byte 'Parameter Error use: POKE aaaa vv[vv]',$9B
    71 0538 FF			            .byte $ff
    72 0539 60			            rts
    73 				            
    74 053A 20 FB 05		start_poke  jsr pget
    75 053D F0 C6		_error_msg  beq error_msg
    76
    77 053F A2 00		            ldx #$00            ; get address
    78 0541 A0 24		            ldy #SD_COMFNAM+3
    79 0543 B1 0A		loop_r4     lda (DOSVEC),Y
    80 0545 C9 9B		            cmp #$9b
    81 0547 F0 BC		            beq error_msg
    82 0549 9D E5 05		            sta char1,x
    83 054C C8			            iny
    84 054D E8			            inx
    85 054E E0 04		            cpx #$04
    86 0550 D0 F1		            bne loop_r4
    87 0552 B1 0A		            lda (DOSVEC),Y
    88 0554 C9 9B		            cmp #$9b
    89 0556 D0 AD		error_msg2  bne error_msg
    90
    91 0558 AE E5 05		            ldx char1            ; convert address
    92 055B AC E6 05		            ldy char2
    93 055E 20 18 06		            jsr conva2h
    94 0561 8D E2 05		            sta adr1_h
    95
    96 0564 AE E7 05		            ldx char3
    97 0567 AC E8 05		            ldy char4
    98 056A 20 18 06		            jsr conva2h
    99 056D 8D E1 05		            sta adr1_l
   100 				            
   101 0570 20 E9 05		            jsr pcheck            ; check for parameter 2
   102 0573 90 90		            bcc error_msg
   103 0575 20 FB 05		            jsr pget
   104 0578 F0 8B		            beq error_msg
   105
   106 057A A2 00		            ldx #$00
   107 057C A0 24		            ldy #SD_COMFNAM+3    ; get value
   108 057E B1 0A		loop_r2     lda (DOSVEC),Y
   109 0580 C9 9B		            cmp #$9b
   110 0582 F0 B9		            beq _error_msg
   111 0584 9D E5 05		            sta char1,x
   112 0587 C8			            iny
   113 0588 E8			            inx
   114 0589 E0 02		vchar_cnt    cpx #$02
   115 058B D0 F1		            bne loop_r2
   116 058D B1 0A		            lda (DOSVEC),Y
   117 058F C9 9B		            cmp #$9b
   118 0591 F0 12		            beq poke
   119
   120 0593 2C E4 05		            bit flag_word        ; chek for word
   121 0596 D0 BE		            bne error_msg2
   122
   123 0598 A9 FF		            lda #$ff
   124 059A 8D E4 05		            sta flag_word
   125 059D A9 04		            lda #$04
   126 059F 8D 8A 05		            sta vchar_cnt+1
   127 05A2 4C 7E 05		            jmp loop_r2
   128 				            
   129 05A5 AE E5 05		poke        ldx char1            ; convert value
   130 05A8 AC E6 05		            ldy char2
   131 05AB 20 18 06		            jsr conva2h
   132 05AE 8D DF 05		            sta val1
   133
   134 05B1 2C E4 05		            bit flag_word        ; check for word
   135 05B4 F0 28		            beq poke_byte
   136
   137 05B6 18			            clc                    ; calc adr for high byte
   138 05B7 AD E1 05		            lda adr1_l
   139 05BA 69 01		            adc #$01
   140 05BC 8D DC 05		            sta adr2_l
   141 05BF AD E2 05		            lda adr1_h
   142 05C2 69 00		            adc #$00
   143 05C4 8D DD 05		            sta adr2_h
   144
   145 05C7 AD DF 05		            lda val1            ; set value for high byte
   146 05CA 8D DA 05		            sta val2
   147
   148 05CD AE E7 05		            ldx char3            ; convert value 2 (low)
   149 05D0 AC E8 05		            ldy char4
   150 05D3 20 18 06		            jsr conva2h
   151 05D6 8D DF 05		            sta val1
   152
   153 05D9 A9 00		c_val2      lda #$00
   154 05DB 8D FF FF		c_adr2      sta $ffff
   155
   156 05DE			poke_byte
   157 05DE A9 00		c_val1      lda #$00
   158 05E0 8D FF FF		c_adr1      sta $ffff
   159
   160 05E3 60			            rts
   161
   162 05E4 00			flag_word    .byte $00
   163 05E5 00			char1        .byte $00
   164 05E6 00			char2        .byte $00
   165 05E7 00			char3        .byte $00
   166 05E8 00			char4        .byte $00
   167
   168 = 05E1			adr1_l        = c_adr1+1
   169 = 05E2			adr1_h        = adr1_l+1
   170
   171 = 05DC			adr2_l        = c_adr2+1
   172 = 05DD			adr2_h        = adr2_l+1
   173
   174 = 05DF			val1          = c_val1+1
   175 = 05DA			val2          = c_val2+1
   176
   177 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178 				;
   179 				; check for next parameter
   180 				;   sets carry if next parameter is available
   181 				;
   182 05E9 A0 0A		pcheck      ldy #SD_BUFOFF
   183 05EB B1 0A		            lda (DOSVEC),Y
   184 05ED 18			            clc
   185 05EE 69 3F		            adc #SD_LBUF
   186 05F0 A8			            tay
   187 05F1 B1 0A		            lda (DOSVEC),Y
   188 05F3 C9 9B		            cmp #$9b
   189 05F5 18			            clc
   190 05F6 F0 01		            beq pcheck_end
   191 05F8 38			            sec
   192 05F9 60			pcheck_end  rts
   193
   194 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195 				;
   196 				; get next parameter
   197 				;   calls crunch name 
   198 				;
   199 				; jump for jsr to crunch name
   200 05FA FF			pget_set    .byte $ff
   201 05FB			pget        ; set crunch name address, if necessary
   202 05FB 2C FA 05		            bit pget_set
   203 05FE 10 14		            bpl pget_call
   204 				            
   205 0600 A5 0A		            lda DOSVEC
   206 0602 18			            clc
   207 0603 69 03		            adc #SD_ZCRNAME
   208 0605 8D 15 06		            sta pget_call+1
   209 				            
   210 0608 A5 0B		            lda DOSVEC+1
   211 060A 69 00		            adc #$00
   212 060C 8D 16 06		            sta pget_call+2
   213 				            
   214 060F A9 00		            lda #$00
   215 0611 8D FA 05		            sta pget_set
   216 				            
   217 0614 20 FF FF		pget_call   jsr $ffff
   218 0617 60			            rts
   219
   220 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   221 				;
   222 				; convert atascii to hex
   223 				;   atascii X,Y -> hex A            
   224 				;
   225 0618 8A			conva2h     txa
   226 0619 20 2A 06		            jsr conva2h_h
   227 061C 0A			            asl
   228 061D 0A			            asl
   229 061E 0A			            asl
   230 061F 0A			            asl
   231 0620 8D 28 06		            sta conva2h_o+1
   232 0623 98			            tya
   233 0624 20 2A 06		            jsr conva2h_h
   234 0627 09 00		conva2h_o   ora #$00
   235 0629 60			            rts
   236 				            
   237 062A 38			conva2h_h   sec
   238 062B E9 30		            sbc #'0'
   239 062D C9 0A		            cmp #$0A
   240 062F 90 03		            bcc conva2h_hl
   241 0631 18			            clc
   242 0632 69 09		            adc #$09
   243 0634 29 0F		conva2h_hl  and #$0F
   244 0636 60			            rts
   245
   246 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   247 				;
   248 				; print subroutine            
   249 				;
   250 0637 68			print       pla
   251 0638 8D 48 06		            sta print_iter+1
   252 063B 68			            pla
   253 063C 8D 49 06		            sta print_iter+2
   254 063F EE 48 06		print_loop  inc print_iter+1
   255 0642 D0 03		            bne print_iter
   256 0644 EE 49 06		            inc print_iter+2
   257 0647 AD FF FF		print_iter  lda $ffff
   258 064A C9 FF		            cmp #$ff
   259 064C F0 13		            beq print_end
   260 				            
   261 064E A2 00		            ldx #$00            ; put char
   262 0650 8E 48 03		            stx ICBLL
   263 0653 8E 49 03		            stx ICBLH
   264 0656 A0 0B		            ldy #$0B
   265 0658 8C 42 03		            sty ICCOM
   266 065B 20 56 E4		            jsr CIOV
   267 				            
   268 065E 4C 3F 06		            jmp print_loop
   269 0661 AD 49 06		print_end   lda print_iter+2
   270 0664 48			            pha
   271 0665 AD 48 06		            lda print_iter+1
   272 0668 48			            pha
   273 0669 60			            rts
   274
   275 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   276 				;
   277 				; run address            
   278 				;
   279 				;            run start
