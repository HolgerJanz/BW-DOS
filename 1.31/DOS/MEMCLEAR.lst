mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/DOS/MEMCLEAR.ASM
     1 				; clears memory from MEMLO to MEMTOP
     2
     3 = 02E5			MEMTOP      = $02E5
     4 = 02E7			MEMLO       = $02E7
     5 = 02FC			CH          = $02FC
     6
     7 				; 
     8 				; CIO
     9 				; 
    10 = E456			CIOV        = $E456
    11 				; CIOCB addresses
    12 = 0340			ICHID       = $0340
    13 = 0341			ICDNO       = $0341
    14 = 0342			ICCOM       = $0342
    15 = 0343			ICSTA       = $0343
    16 = 0344			ICBAL       = $0344
    17 = 0345			ICBAH       = $0345
    18 = 0346			ICPTL       = $0346
    19 = 0347			ICPTH       = $0347
    20 = 0348			ICBLL       = $0348
    21 = 0349			ICBLH       = $0349
    22 = 034A			ICAX1       = $034a
    23 = 034B			ICAX2       = $034b
    24
    25
    26 				;
    27 				; SpartaDOS 
    28 				;
    29 = 000A			DOSVEC      = $000A
    30 				;
    31 = 000A			SD_BUFOFF   = $0A ; offset in line buffer
    32 = 003F			SD_LBUF     = $3F ; offset to line buffer
    33 = 0003			SD_ZCRNAME  = $03 ; offset for jmp to crunch name
    34 = 0021			SD_COMFNAM  = $21 ; offset to buffer for crunch name 
    35 = 000A			SD_LSIO     = $0A ; negative offset to SIO vector
    36
    37 				            org $500
    38
    39 FFFF> 0500-06AE> 20 80 +             jsr pcheck          ; check for parameter 1
    40 0503 90 65		            bcc startClear
    41
    42 0505 20 92 06		            jsr pget            ; get parameter
    43 0508 F0 2A		            beq parameterError
    44 				            
    45 050A A2 00		            ldx #$00
    46 050C A0 24		            ldy #SD_COMFNAM+3   ; get value
    47 050E B1 0A		loop_r2     lda (DOSVEC),Y
    48 0510 C9 9B		            cmp #$9b
    49 0512 F0 20		            beq parameterError
    50 0514 9D B6 05		            sta clr_char,x
    51 0517 C8			            iny
    52 0518 E8			            inx
    53 0519 E0 02		vchar_cnt    cpx #$02
    54 051B D0 F1		            bne loop_r2
    55 				            
    56 051D B1 0A		            lda (DOSVEC),Y      ; check for end after second char
    57 051F C9 9B		            cmp #$9b
    58 0521 D0 11		            bne parameterError
    59 				            
    60 0523 AE B6 05		            ldx clr_char        ; convert to hex
    61 0526 AC B7 05		            ldy clr_char+1
    62 0529 20 52 06		            jsr conva2h
    63 052C 8D DE 05		            sta clearValue+1
    64
    65 052F 20 80 06		            jsr pcheck          ; check for too many parameter
    66 0532 90 36		            bcc startClear
    67
    68 0534			parameterError
    69 0534 20 08 06		            jsr print
    70 0537 9B 4D 45 4D 43 4C +             .byte $9b,'MEMCLEAR 1.0',$9b
    71 0545 50 61 72 61 6D 65 +             .byte 'Parameter Error use: MEMCLEAR [hh]',$9b,$ff
    72 0569 60			            rts
    73
    74 056A			startClear
    75 056A AD E8 02		            lda MEMLO+1
    76 056D 20 3B 06		            jsr convh2a
    77 0570 8E A5 05		            stx adr_low
    78 0573 8C A6 05		            sty adr_low+1
    79 0576 AD E7 02		            lda MEMLO
    80 0579 20 3B 06		            jsr convh2a
    81 057C 8E A7 05		            stx adr_low+2
    82 057F 8C A8 05		            sty adr_low+3
    83
    84 0582 AD E6 02		            lda MEMTOP+1
    85 0585 20 3B 06		            jsr convh2a
    86 0588 8E AB 05		            stx adr_high
    87 058B 8C AC 05		            sty adr_high+1
    88 058E AD E5 02		            lda MEMTOP
    89 0591 20 3B 06		            jsr convh2a
    90 0594 8E AD 05		            stx adr_high+2
    91 0597 8C AE 05		            sty adr_high+3
    92
    93 059A 20 08 06		            jsr PRINT
    94 059D 9B 43 6C 65 61 72 +             .byte $9b,'Clear $' 
    95 05A5 78 78 78 78 2D 24	adr_low     .byte 'xxxx-$'
    96 05AB 79 79 79 79 20 77 + adr_high    .byte 'yyyy with $'
    97 05B6 30 30 3F 20 28 59 + clr_char    .byte '00? (Y)',$ff
    98
    99 05BE 20 71 06		            jsr getKey
   100 05C1 C9 2B		            cmp #$2B
   101 05C3 F0 0C		            beq clear_start
   102 05C5 20 08 06		            jsr PRINT
   103 05C8 9B 41 62 6F 72 74 +             .byte $9b,'Abort',$9b,$ff 
   104 05D0 60			            rts
   105
   106 05D1			clear_start
   107 05D1 AD E7 02		            lda MEMLO
   108 05D4 8D E0 05		            sta clear_loop+1
   109 05D7 AD E8 02		            lda MEMLO+1
   110 05DA 8D E1 05		            sta clear_loop+2
   111
   112 05DD A2 00		clearValue  ldx #$00
   113 05DF 8E FF FF		clear_loop  stx $ffff
   114
   115 05E2 AD E1 05		            lda clear_loop+2    ; check for MEMTOP
   116 05E5 CD E6 02		            cmp MEMTOP+1
   117 05E8 D0 08		            bne clear_inc
   118 05EA AD E0 05		            lda clear_loop+1
   119 05ED CD E5 02		            cmp MEMTOP
   120 05F0 B0 0B		            bcs clear_end
   121 				            
   122 05F2 EE E0 05		clear_inc   inc clear_loop+1    ; inc address
   123 05F5 D0 E8		            bne clear_loop
   124 05F7 EE E1 05		            inc clear_loop+2
   125 05FA 4C DF 05		            jmp clear_loop
   126 				            
   127 05FD 20 08 06		clear_end   jsr PRINT
   128 0600 9B 44 6F 6E 65 9B +             .byte $9b,'Done',$9b,$ff 
   129 0607 60			            rts
   130
   131
   132 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   133 				;
   134 				; print subroutine            
   135 				;
   136 0608 68			print       pla
   137 0609 8D 19 06		            sta print_iter+1
   138 060C 68			            pla
   139 060D 8D 1A 06		            sta print_iter+2
   140 0610 EE 19 06		print_loop  inc print_iter+1
   141 0613 D0 03		            bne print_iter
   142 0615 EE 1A 06		            inc print_iter+2
   143 0618 AD FF FF		print_iter  lda $ffff
   144 061B C9 FF		            cmp #$ff
   145 061D F0 13		            beq print_end
   146 				            
   147 061F A2 00		            ldx #$00            ; put char
   148 0621 8E 48 03		            stx ICBLL
   149 0624 8E 49 03		            stx ICBLH
   150 0627 A0 0B		            ldy #$0B
   151 0629 8C 42 03		            sty ICCOM
   152 062C 20 56 E4		            jsr CIOV
   153 				            
   154 062F 4C 10 06		            jmp print_loop
   155 0632 AD 1A 06		print_end   lda print_iter+2
   156 0635 48			            pha
   157 0636 AD 19 06		            lda print_iter+1
   158 0639 48			            pha
   159 063A 60			            rts
   160
   161 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   162 				;
   163 				; convert hex to atascii
   164 				;   hex A -> atascii X,Y            
   165 				;
   166 063B 48			convh2a     pha
   167 063C 4A			            lsr
   168 063D 4A			            lsr
   169 063E 4A			            lsr
   170 063F 4A			            lsr
   171 0640 F8			            sed        
   172 0641 18			            clc
   173 0642 69 90		            adc #$90
   174 0644 69 40		            adc #$40
   175 0646 AA			            tax
   176 0647 68			            pla
   177 0648 29 0F		            and #$0f
   178 064A 18			            clc
   179 064B 69 90		            adc #$90
   180 064D 69 40		            adc #$40
   181 064F A8			            tay
   182 0650 D8			            cld            
   183 0651 60			            rts
   184
   185 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   186 				;
   187 				; convert atascii to hex
   188 				;   atascii X,Y -> hex A            
   189 				;
   190 0652 8A			conva2h     txa
   191 0653 20 64 06		            jsr conva2h_h
   192 0656 0A			            asl
   193 0657 0A			            asl
   194 0658 0A			            asl
   195 0659 0A			            asl
   196 065A 8D 62 06		            sta conva2h_o+1
   197 065D 98			            tya
   198 065E 20 64 06		            jsr conva2h_h
   199 0661 09 00		conva2h_o   ora #$00
   200 0663 60			            rts
   201 				            
   202 0664 38			conva2h_h   sec
   203 0665 E9 30		            sbc #'0'
   204 0667 C9 0A		            cmp #$0A
   205 0669 90 03		            bcc conva2h_hl
   206 066B 18			            clc
   207 066C 69 09		            adc #$09
   208 066E 29 0F		conva2h_hl  and #$0F
   209 0670 60			            rts
   210
   211 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   212 				;
   213 				; get key
   214 				;
   215 0671			getKey
   216 0671 A9 FF		            lda #$FF        ; check for key
   217 0673 AA			            tax
   218 0674 CD FC 02		            cmp CH
   219 0677 F0 F8		            beq getKey
   220 0679 AD FC 02		            lda CH
   221 067C 8E FC 02		            stx CH
   222 067F 60			            rts
   223 				            
   224 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   225 				;
   226 				; check for next parameter
   227 				;   sets carry if next parameter is available
   228 				;
   229 0680 A0 0A		pcheck      ldy #SD_BUFOFF
   230 0682 B1 0A		            lda (DOSVEC),Y
   231 0684 18			            clc
   232 0685 69 3F		            adc #SD_LBUF
   233 0687 A8			            tay
   234 0688 B1 0A		            lda (DOSVEC),Y
   235 068A C9 9B		            cmp #$9b
   236 068C 18			            clc
   237 068D F0 01		            beq pcheck_end
   238 068F 38			            sec
   239 0690 60			pcheck_end  rts
   240
   241 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242 				;
   243 				; get next parameter
   244 				;   calls crunch name 
   245 				;
   246 				; jump for jsr to crunch name
   247 0691 FF			pget_set    .byte $ff
   248 0692			pget        ; set crunch name address, if necessary
   249 0692 2C 91 06		            bit pget_set
   250 0695 10 14		            bpl pget_call
   251 				            
   252 0697 A5 0A		            lda DOSVEC
   253 0699 18			            clc
   254 069A 69 03		            adc #SD_ZCRNAME
   255 069C 8D AC 06		            sta pget_call+1
   256 				            
   257 069F A5 0B		            lda DOSVEC+1
   258 06A1 69 00		            adc #$00
   259 06A3 8D AD 06		            sta pget_call+2
   260 				            
   261 06A6 A9 00		            lda #$00
   262 06A8 8D 91 06		            sta pget_set
   263 				            
   264 06AB 20 FF FF		pget_call   jsr $ffff
   265 06AE 60			            rts
